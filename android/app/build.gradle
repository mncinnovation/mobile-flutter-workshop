def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
// apply plugin: 'com.google.gms.google-services'
// apply plugin: 'com.google.firebase.crashlytics'


apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "unknown"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
       staging {
           keyAlias keystoreProperties['keyAliasStaging']
           keyPassword keystoreProperties['storePasswordStaging']
           storeFile keystoreProperties['storeFileStaging'] ? file(keystoreProperties['storeFileStaging']) : null
           storePassword keystoreProperties['storePasswordStaging']
       }

       dev {
           keyAlias keystoreProperties['keyAliasDev']
           keyPassword keystoreProperties['storePasswordDev']
           storeFile keystoreProperties['storeFileDev'] ? file(keystoreProperties['storeFileDev']) : null
           storePassword keystoreProperties['storePasswordDev']
       }

       prod {
           keyAlias keystoreProperties['keyAliasProd']
           keyPassword keystoreProperties['storePasswordProd']
           storeFile keystoreProperties['storeFileProd'] ? file(keystoreProperties['storeFileProd']) : null
           storePassword keystoreProperties['storePasswordProd']
       }
    }

    flavorDimensions "app"

    productFlavors {
        prod {
            applicationId "id.domain.dartpackage"
            signingConfig signingConfigs.prod
        }
        dev {
            applicationId "id.domain.dartpackage.dev"
            signingConfig signingConfigs.dev
        }
        staging {
            applicationId "id.domain.dartpackage.staging"
            signingConfig signingConfigs.staging
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
